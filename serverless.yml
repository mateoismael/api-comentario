org: mateoismael
service: api-comentario

provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 30
  # Si quieres que Serverless gestione el rol e incluya permisos a DynamoDB y S3,
  # reemplaza provider.iam.role por iamRoleStatements:
  # iam.role: arn:aws:iam::111097882274:role/LabRole
  environment:
    TABLE_NAME: ${sls:stage}-t_comentarios
    BUCKET_NAME: ingest-${sls:stage}

  iamRoleStatements:
    # Permite put en tu tabla DynamoDB
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}
    # Permite subir objetos al bucket S3 creado abajo
    - Effect: Allow
      Action:
        - s3:PutObject
      Resource:
        - arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*

functions:
  crear:
    handler: comentario.lambda_handler
    events:
      - http:
          path: /comentario/crear
          method: post
          cors: true
          integration: lambda

resources:
  Resources:
    TablaComentarios:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: uuid
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    BucketIngesta:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME}
        # Opcional: versionado, lifecycle, pol√≠ticas, etc.
